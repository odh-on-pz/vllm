###############################################################
# base stage with basic dependencies
###############################################################
FROM registry.access.redhat.com/ubi9/ubi AS base-builder

ARG PYTHON_VERSION=3.12
ARG OPENBLAS_VERSION=0.3.29

# Set Environment Variables for venv, cargo & openblas
ENV PATH=/opt/vllm/bin:/root/.cargo/bin:$PATH
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib

# install gcc-13, python, rust, openblas
# Note: A symlink for libatomic.so is created for gcc-13 (linker fails to find to find libatomic otherwise - reqd. for sentencepiece)
# Note: A dummy file 'control' is created in /tmp/ to artifically create dependencies between stages when building stages in parallel
#       when `--jobs=<N>` is passed with podman build command
RUN dnf install -y https://mirror.stream.centos.org/9-stream/BaseOS/`arch`/os/Packages/centos-gpg-keys-9.0-24.el9.noarch.rpm \
        https://mirror.stream.centos.org/9-stream/BaseOS/`arch`/os/Packages/centos-stream-repos-9.0-24.el9.noarch.rpm \
        https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm \
    && dnf config-manager --add-repo https://mirror.stream.centos.org/9-stream/BaseOS/`arch`/os \
    && dnf config-manager --add-repo https://mirror.stream.centos.org/9-stream/AppStream/`arch`/os \
    && dnf config-manager --set-enabled crb \
    && dnf install -y \
       git tar gcc-toolset-13 numactl-devel lapack-devel \
       pkgconfig openssl-devel xsimd zeromq-devel \
       libtiff-devel libjpeg-devel openjpeg2-devel zlib-devel \
       freetype-devel lcms2-devel libwebp-devel tcl-devel tk-devel \
       harfbuzz-devel fribidi-devel libraqm-devel libimagequant-devel libxcb-devel \
       python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-pip \
    && dnf clean all \
    && ln -sf /usr/lib64/libatomic.so.1 /usr/lib64/libatomic.so \
    && python${PYTHON_VERSION} -m venv /opt/vllm \
    && python -m pip install -U pip uv \
    && uv pip install wheel build setuptools setuptools_scm meson-python cmake ninja cython \
    && curl -sL https://ftp2.osuosl.org/pub/ppc64el/openblas/latest/Openblas_${OPENBLAS_VERSION}_ppc64le.tar.gz | tar xvf - -C /usr/local \
    && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && cd /tmp && touch control

###############################################################
# Stage to build pytorch, torchvision, torchaudio
###############################################################
FROM base-builder AS torch-builder

ARG MAX_JOBS

ARG TORCH_VERSION=2.5.1
ARG _GLIBCXX_USE_CXX11_ABI=1
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    source /opt/rh/gcc-toolset-13/enable &&  \
    git clone --recursive https://github.com/pytorch/pytorch.git -b v${TORCH_VERSION} && \
    cd pytorch && \
    uv pip install -r requirements.txt && \
    python setup.py develop && \
    rm -f dist/torch*+git*whl && \
    MAX_JOBS=${MAX_JOBS:-$(nproc)} \
    python -m build -w -o /torchwheels/

ARG TORCHVISION_VERSION=0.20.1
ARG TORCHVISION_USE_NVJPEG=0
ARG TORCHVISION_USE_FFMPEG=0
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    source /opt/rh/gcc-toolset-13/enable && \
    git clone --recursive https://github.com/pytorch/vision.git -b v${TORCHVISION_VERSION} && \
    cd vision && \
    MAX_JOBS=${MAX_JOBS:-$(nproc)} \
    python -m build -w --no-isolation -o /torchwheels/

ARG TORCHAUDIO_VERSION=2.5.1
ARG BUILD_SOX=1
ARG BUILD_KALDI=1
ARG BUILD_RNNT=1
ARG USE_FFMPEG=0
ARG USE_ROCM=0
ARG USE_CUDA=0
ARG TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_FFMPEG=1
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    source /opt/rh/gcc-toolset-13/enable && \
    git clone --recursive https://github.com/pytorch/audio.git -b v${TORCHAUDIO_VERSION} && \
    cd audio && \
    MAX_JOBS=${MAX_JOBS:-$(nproc)} \
    python -m build -w --no-isolation -o /torchwheels/

###############################################################
# Stage to build pyarrow
###############################################################
FROM base-builder AS arrow-builder

ARG MAX_JOBS
ARG PYARROW_PARALLEL

ARG PYARROW_VERSION=19.0.0
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    source /opt/rh/gcc-toolset-13/enable && \
    git clone --recursive https://github.com/apache/arrow.git -b apache-arrow-${PYARROW_VERSION} && \
    cd arrow/cpp && \
    mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=release \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DARROW_PYTHON=ON \
        -DARROW_BUILD_TESTS=OFF \
        -DARROW_JEMALLOC=ON \
        -DARROW_BUILD_STATIC="OFF" \
        -DARROW_PARQUET=ON \
        .. && \
    make install -j ${MAX_JOBS:-$(nproc)} && \
    cd ../../python/ && \
    uv pip install -v -r requirements-wheel-build.txt && \
    PYARROW_PARALLEL=${PYARROW_PARALLEL:-$(nproc)} \
    python setup.py build_ext \
    --build-type=release --bundle-arrow-cpp \
    bdist_wheel --dist-dir /arrowwheels/

###############################################################
# Stage to build opencv
###############################################################
FROM base-builder AS cv-builder

ARG MAX_JOBS
ARG OPENCV_VERSION=84
ARG ENABLE_HEADLESS=1
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    source /opt/rh/gcc-toolset-13/enable && \
    git clone --recursive https://github.com/opencv/opencv-python.git -b ${OPENCV_VERSION} && \
    cd opencv-python && \
    sed -i 's/"setuptools==59.2.0",/"setuptools<70.0",/g' pyproject.toml && \
    python -m build -w -o /opencvwheels/

###############################################################
# Stage to build & install vllm
###############################################################
# Why is this stage needed?
# There are packages which vllm depends on which build from src provided compilers are present
# To keep the final image as small as possible, we can have all the wheels build in this stage
# and consume it in the final stage
FROM base-builder AS vllm-deps

ARG VLLM_TGIS_ADAPTER_VERSION=0.6.2
ARG TGIS_PATCH=178d4baf
ARG GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=1

# create artificial dependencies between stages
# wait for torch, arrow & openv build stages
COPY --from=torch-builder /tmp/control /dev/null
COPY --from=arrow-builder /tmp/control /dev/null
COPY --from=cv-builder /tmp/control /dev/null

# build vllm wheel
# Note: use pip instead of uv to build the pip cache
ARG VLLM_TARGET_DEVICE=cpu
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,from=torch-builder,source=/torchwheels/,target=/torchwheels/,ro \
    --mount=type=bind,from=arrow-builder,source=/arrowwheels/,target=/arrowwheels/,ro \
    --mount=type=bind,from=cv-builder,source=/opencvwheels/,target=/opencvwheels/,ro \
    --mount=type=bind,src=.,dst=/vllm,rw \
    source /opt/rh/gcc-toolset-13/enable && \
    pip install -v \
        /arrowwheels/*.whl \
        /opencvwheels/*.whl \
        /torchwheels/*.whl && \
    cd /vllm && \
    pip install pandas==2.0 && \
    pip install -v ".[tensorizer]" --no-build-isolation && \
    python -m build -w -o /wheelsdir/ --no-isolation && \
    cd .. && \
    git clone https://github.com/opendatahub-io/vllm-tgis-adapter.git -b ${VLLM_TGIS_ADAPTER_VERSION} && \
    cd vllm-tgis-adapter && \
    git cherry-pick --no-commit ${TGIS_PATCH} && \
    python -m build -w -o /wheelsdir/


###############################################################
#                   FINAL VLLM IMAGE STAGE                    #
###############################################################

FROM registry.access.redhat.com/ubi9/ubi-minimal

ARG PYTHON_VERSION=3.12
ARG OPENBLAS_VERSION=0.3.29

# Set Environment Variables for venv & openblas
ENV PATH=/opt/vllm/bin:$PATH
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib


# create artificial dependencies between stages for independent stages to build in parallel
COPY --from=torch-builder /tmp/control /dev/null
COPY --from=arrow-builder /tmp/control /dev/null
COPY --from=cv-builder /tmp/control /dev/null
COPY --from=vllm-deps /tmp/control /dev/null

# install gcc-13, python, openblas
RUN rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \
    microdnf install --nodocs -y \
    tar findutils unzip openssl numactl lapack \
    pkgconfig xsimd gcc-toolset-13 libsndfile \
    libtiff libjpeg openjpeg2 zlib zeromq \
    freetype lcms2 libwebp tcl tk utf8proc \
    harfbuzz fribidi libraqm libimagequant libxcb \
    python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-pip \
    && microdnf clean all \
    && python${PYTHON_VERSION} -m venv /opt/vllm \
    && python -m pip install -U pip uv \
    && curl -sL https://ftp2.osuosl.org/pub/ppc64el/openblas/latest/Openblas_${OPENBLAS_VERSION}_ppc64le.tar.gz | tar xvf - -C /usr/local

# use pip instead of uv to reuse the pip cache from vllm-deps stage
# mount cache directory from vllm-deps stage to avoid redundant compilation
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,from=torch-builder,source=/torchwheels/,target=/torchwheels/,ro \
    --mount=type=bind,from=arrow-builder,source=/arrowwheels/,target=/arrowwheels/,ro \
    --mount=type=bind,from=cv-builder,source=/opencvwheels/,target=/opencvwheels/,ro \
    --mount=type=bind,from=vllm-deps,source=/wheelsdir/,target=/wheelsdir/,ro \
    --mount=type=bind,from=vllm-deps,source=/root/.cache,target=/root/.cache,ro \
    pip install pandas==2.0 && \
    pip install -v \
        /arrowwheels/*.whl \
        /opencvwheels/*.whl \
        /torchwheels/*.whl \
        /wheelsdir/*.whl

WORKDIR /workspace
# setup non-root user for OpenShift
RUN umask 002 && \
    useradd --uid 2000 --gid 0 vllm && \
    mkdir -p /home/vllm && \
    chmod g+rwx /home/vllm /usr/src /workspace
COPY LICENSE /licenses/vllm.md
COPY examples/*.jinja /app/data/template/
USER 2000
WORKDIR /home/vllm
ENV GRPC_PORT=8033 \
    PORT=8000 \
    # As an optimization, vLLM disables logprobs when using spec decoding by
    # default, but this would be unexpected to users of a hosted model that
    # happens to have spec decoding
    # see: https://github.com/vllm-project/vllm/pull/6485
    DISABLE_LOGPROBS_DURING_SPEC_DECODING=false
USER 2000
ENTRYPOINT ["python", "-m", "vllm_tgis_adapter", "--uvicorn-log-level=warning"]
